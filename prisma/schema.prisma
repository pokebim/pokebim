// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Define models for our Pokemon card database

model Supplier {
  id        String     @id @default(uuid())
  name      String     @unique
  contact   String?
  website   String?
  notes     String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  products  Product[]
  prices    Price[]
}

model Product {
  id          String    @id @default(uuid())
  name        String
  language    String    // Japanese, Korean, Chinese, etc.
  type        String?   // Booster, Box, Card, etc.
  imageUrl    String?
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  prices      Price[]
  supplier    Supplier  @relation(fields: [supplierId], references: [id])
  supplierId  String
  stock       Stock[]

  @@unique([name, language])
}

model Price {
  id         String   @id @default(uuid())
  price      Float
  currency   String   // Yen, USD, EUR, etc.
  priceUnit  String?  // Per Box, Per Case, etc.
  bulkPrice  Float?
  shipping   Float?
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
  supplier   Supplier @relation(fields: [supplierId], references: [id])
  supplierId String

  @@unique([productId, supplierId])
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  password  String
  role      String   @default("user")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Stock {
  id                String    @id @default(uuid())
  product           Product   @relation(fields: [productId], references: [id])
  productId         String
  quantity          Int       @default(0)
  storeQuantity     Int       @default(0)
  investmentQuantity Int       @default(0)
  holdStore         Int       @default(0)
  unitPrice         Float
  totalPrice        Float
  vatIncluded       Boolean   @default(false)
  arrivalDate       DateTime?
  isPaid            Boolean   @default(false)
  storeTotalPrice   Float?
  costPerPerson     Float?
  wallapopPrice     Float?
  amazonPrice       Float?
  cardmarketPrice   Float?
  approxSellingPrice Float?
  profitPerUnit     Float?
  profitPercentage  Float?
  totalProfit       Float?
  tikTokPrice       Float?
  storePrice        Float?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([productId])
}

// Modelo para gastos empresariales
model CompanyExpense {
  id          String   @id @default(uuid())
  name        String   // Nombre del gasto/producto
  price       Float    // Precio
  link        String?  // Enlace del producto (opcional)
  paidBy      String   // Quién pagó: "edmon", "albert", "biel" o "todos"
  isPaid      Boolean  @default(false) // Si ya está pagado
  paymentDate DateTime? // Fecha de pago
  category    String? // Categoría del gasto (ej: "Material", "Web", "Oficina")
  notes       String? // Notas adicionales
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
